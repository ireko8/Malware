import pickle
import feather
from pathlib import Path
import numpy as np
import pandas as pd
from keras.models import Model
from keras import backend as K
from NN.embedding_nn import embedded_mlp
from tqdm import tqdm


def dump_embedd_layer(res_dir, conf):
    embedd_conf = conf[0]
    emb_dict = dict()
    model = embedded_mlp(conf)
    for j in tqdm(range(5)):
        fold_dict = dict()
        model.load_weights(Path(res_dir) / f'fold{j}' / 'weights.hdf5')
        for i, (c, _, m) in tqdm(enumerate(embedd_conf)):
            train = feather.read_dataframe(f'features/NN/train_nejumi_v2/{c}.ftr')
            train_orig = feather.read_dataframe(f'features/X_train_nejumi.ftr',
                                                columns=[c])
            train = pd.concat([train.rename({c: 'enc'}, axis=1),
                               train_orig.rename({c: 'orig'}, axis=1)],
                              axis=1)
            train = train.drop_duplicates()

            import ipdb
            with ipdb.launch_ipdb_on_exception():
                inputs = model.get_layer(f'{c}').input
                outputs = model.layers[i+76].output
                emb_out = Model(input=inputs, output=outputs)
                emb = np.concatenate(emb_out.predict(train.enc.values),
                                     axis=0)
                conv_dict = dict()
                for i, v in enumerate(train.orig.values):
                    conv_dict[v] = emb[i]
                fold_dict[c] = conv_dict

        # fold_idx = np.load(res_dir / f'fold{j}tes_ind.npy')
        emb_dict[f'fold_{j}'] = fold_dict
    
    return emb_dict


if __name__ == '__main__':
    with open('features/NN/conf_nejumi_v2.pkl', 'rb') as f:
        conf = pickle.load(f)
    emb = dump_embedd_layer('result/2019_02_17_04_52_33', conf)
    with open('embed.pkl', 'wb') as f:
        pickle.dump(emb, f)
