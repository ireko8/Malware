from keras.layers import Input, Embedding, Flatten, merge, Activation
from keras.models import Model
from keras.regularizers import l2 as l2_reg
import itertools


def build_model(conf, K=8, solver="adam", l2=0.0, l2_fm=0.0):

    inputs = []
    flatten_layers = []
    columns = range(len(max_features))
    for c, m, d in conf[1]:
        inputs_c = Input(shape=(1,), dtype="int32", name="input_%s" % c)

        embed_c = Embedding(
            m, K, input_length=1, name="embed_%s" % c, W_regularizer=l2_reg(l2_fm)
        )(inputs_c)

        flatten_c = Flatten()(embed_c)

        inputs.append(inputs_c)
        flatten_layers.append(flatten_c)

    fm_layers = []
    for emb1, emb2 in itertools.combinations(flatten_layers, 2):
        dot_layer = merge([emb1, emb2], mode="dot", dot_axes=1)
        fm_layers.append(dot_layer)

    for c in conf[0]:
        embed_c = Embedding(
            c, 1, input_length=1, name="linear_%s" % c, W_regularizer=l2_reg(l2)
        )(inputs[c])

        flatten_c = Flatten()(embed_c)

        fm_layers.append(flatten_c)

    flatten = merge(fm_layers, mode="sum")
    outputs = Activation("sigmoid", name="outputs")(flatten)

    model = Model(input=inputs, output=outputs)

    model.compile(optimizer=solver, loss="binary_crossentropy")

    return model
