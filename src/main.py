from pathlib import Path
from pprint import pformat
import lightgbm
import numpy as np
import pandas as pd
from sklearn.model_selection import StratifiedKFold
from config import conf
from utils import load_fs, now
from utils import make_submission, copy_script
from nn_cv import NN_cv
from logger import Logger


def main():
    experiment_name = now()
    cv_path = Path(f'result/{experiment_name}')
    cv_path.mkdir(parents=True)

    copy_script(cv_path)
    log = Logger(experiment_name, cv_path / 'exp.log')

    log.info('load data')
    with log.interval_timer('load data'):
        train_df = load_fs()
        # train_df = load_fs()
        test = load_fs(test=True)
        train_df['is_test'] = False
        test['is_test'] = True
        test['HasDetections'] = -1
        df = pd.concat([train_df, test])
        for c, t in conf.dtypes.items():
            try:
                df[c] = df[c].astype(t)
            except KeyError:
                continue

    log.info(pformat(list(df.columns)))
    for c in df.columns:
        for x in ['EngineVersion', 'AppVersion', 'AvSigVersion',
                  'Census_OSVersion', 'OsBuildLab']:
            if x in c:
                try:
                    df[c] = df[c].astype('int')
                except ValueError:
                    df[c] = df[c].astype('category')
    
    train_df = df.loc[~df.is_test].drop(['is_test'], axis=1)
    train = train_df.reset_index(drop=True)
    test = df.loc[df.is_test].drop(['HasDetections', 'is_test'], axis=1)
    test = test.reset_index(drop=True)

    train_X = train.loc[:, train.columns != 'HasDetections']
    train_y = train.loc[:, 'HasDetections']
    cv = StratifiedKFold(n_splits=5, random_state=conf.seed)
    cv = cv.split(train_X, train_y)

    log.info('learning start')
    log.double_kiritori()
    score, pred, meta = NN_cv(train_X, train_y, cv, log, cv_path, test)
    log.info(score)
    log.double_kiritori()
    log.info('done')

    del train, train_X, train_y

    np.save(cv_path / 'test_preds.npy', pred)
    
    make_submission(pred, f'submissions/{experiment_name}.csv.gz')


if __name__ == '__main__':
    main()
