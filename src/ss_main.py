import pickle
from pathlib import Path
from pprint import pformat
import numpy as np
import pandas as pd
import feather
from sklearn.model_selection import StratifiedKFold
from ss_config import conf
from utils import load_fs, now
from utils import make_submission, copy_script
# from ae_cv import AE_cv
from ss_cv import NN_cv
# from deepctr_cv import deepctr_cv
from logger import Logger


def main():
    experiment_name = f'ss_target_{now()}'
    cv_path = Path(f"result/{experiment_name}")
    cv_path.mkdir(parents=True)

    copy_script(cv_path)
    log = Logger(experiment_name, cv_path / "exp.log")

    log.info("load data")
    with log.interval_timer("load data"):
        train = load_fs('nejumi_ss', conf)
        train_y = train.SmartScreen
        train_X = train.loc[:, train.columns != 'SmartScreen']
        test = load_fs('nejumi_ss', conf, test=True)
        test_y = test.SmartScreen
        test_X = test.loc[:, test.columns != 'SmartScreen']

    train_X = pd.concat([train_X, test_X])
    train_y = pd.concat([train_y, test_y])

    log.info(pformat(list(train_X.columns)))
    cv = StratifiedKFold(n_splits=5, random_state=conf.seed)
    cv = cv.split(train_X, train_y)

    log.info("learning start")
    log.double_kiritori()
    with open('features/NN/conf_nejumi_ss.pkl', 'rb') as p:
        embedd_conf = pickle.load(p)
        new_emb_conf = list()
    new_emb_conf.append([c for c in embedd_conf[0] if c[0] != 'SmartScreen'])
    num_dict = dict()
    cols, input_size, out_size = embedd_conf[1]['cont']
    cols = [c for c in cols if 'SmartScreen' not in c]
    input_size = len(cols)
    num_dict['cont'] = cols, input_size, out_size
    new_emb_conf.append(num_dict)
    log.info(pformat(new_emb_conf))
    import ipdb
    ipdb.set_trace()

    meta = NN_cv(
        train_X, train_y, cv, log, cv_path,
        split_conf=new_emb_conf
    )
    log.double_kiritori()
    log.info("done")

    del train_X, train_y

    np.save(cv_path / "oof_preds.npy", meta)


if __name__ == "__main__":
    main()
