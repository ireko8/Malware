import resource
import copy
from datetime import datetime
from shutil import copytree
import random
import numpy as np
import torch
import pandas as pd
import matplotlib.pyplot as plt
from config import conf


def set_ulimit(limit):
    rlimit = resource.getrlimit(resource.RLIMIT_NOFILE)
    resource.setrlimit(resource.RLIMIT_NOFILE, (limit, rlimit[1]))


def now():
    return datetime.now().strftime("%Y_%m_%d_%H_%M_%S")


def set_seed(seed):
    random.seed(seed)
    np.random.seed(seed)
    torch.backends.cudnn.deterministic = False
    torch.manual_seed(seed)


def load_csv(debug=False, test=False):
    if debug:
        load_rows = 1000
    else:
        load_rows = None

    dtypes = copy.deepcopy(conf.dtypes)
    if test:
        path = conf.TEST
        dtypes.pop('HasDetections')
    else:
        path = conf.TRAIN
        
    df = pd.read_csv(path, dtype=dtypes, nrows=load_rows)
    return df


def plot_importance(fi, fn, img_path):
    fi_mean = np.mean(fi, axis=0)
    fi_std = np.std(fi, axis=0)
    fi_df = pd.DataFrame(np.array([fi_mean, fi_std, fn]).T,
                         columns=['feature_importance', 'fi_std', 'name'])
    
    fi_df.feature_importance = fi_df.feature_importance.astype('float32')
    fi_df.fi_std = fi_df.fi_std.astype('float32')

    fi_df = fi_df.sort_values('feature_importance', ascending=False)
    fi_df.plot.barh(y='feature_importance', x='name', yerr='fi_std')
    plt.savefig(img_path / 'fi_plot.pdf')
    return fi_df


def rank_average(prob_list):
    avg = np.zeros_like(prob_list[0])
    for p in prob_list:
        p = pd.Series(p)
        avg += p.rank() / p.shape[0]
    avg /= len(prob_list)
    return avg


def count_parameter(model):
    return sum(p.numel() for p in model.parameters())


def get_lr(optimizer):
    lr = list()
    for param_group in optimizer.param_groups:
        lr.append(param_group['lr'])
    if len(lr) == 1:
        return lr[0]
    else:
        return lr


def copy_script(cv_path):
    copytree('src', cv_path / 'src')


def make_submission(preds, fname):
    sub = pd.read_csv('input/sample_submission.csv')
    sub['HasDetections'] = preds
    sub.to_csv(fname, index=False)
